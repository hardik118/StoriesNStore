// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  posts     Post[]
  like      Like[]
  UserShop   UserShop[]
  savedpost String[]
  saveIntrest String[]

  followed Follow[] @relation("userFollowing")
  follwoing Follow[] @relation("userFollowers")

}
model Follow {
  id  String @id @default( uuid())

  followedId String
  followingId String
  followed User @relation("userFollowing", fields: [followedId], references: [id])
  following User @relation("userFollowers", fields: [followingId], references: [id])

  @@index([followedId, followingId])
}



model Post{
  id String @id @default(uuid())
  title String
  content String
  published Boolean @default(false)
  author User @relation(fields: [authorId], references: [id])
  authorId String
  like Like[]
  createdAt DateTime @default(now())
}

model Like{
  id String @id @default(uuid())
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  createdAt DateTime @default(now())
}

model UserShop{
  ShopId String @id @default(uuid())
  Name String
  userId String
  shopDesc String
  user User @relation(fields: [userId] , references: [id])
  shopDoc ShopDoc[]
}

model ShopDoc{
  id String @id @default( uuid())
  title String
  metaInfo String
  Tags String
  DocLink String
  userShop UserShop @relation(fields: [id], references: [ShopId])
  shopId String
}